// clang++  -I /usr/local/Cellar/opencv/4.4.0_2/include/opencv4 -L /usr/local/Cellar/opencv/4.4.0_2/lib -lopencv_gapi -lopencv_stitching -lopencv_alphamat -lopencv_aruco -lopencv_bgsegm -lopencv_bioinspired -lopencv_ccalib -lopencv_dnn_objdetect -lopencv_dnn_superres -lopencv_dpm -lopencv_highgui -lopencv_face -lopencv_freetype -lopencv_fuzzy -lopencv_hfs -lopencv_img_hash -lopencv_intensity_transform -lopencv_line_descriptor -lopencv_quality -lopencv_rapid -lopencv_reg -lopencv_rgbd -lopencv_saliency -lopencv_sfm -lopencv_stereo -lopencv_structured_light -lopencv_phase_unwrapping -lopencv_superres -lopencv_optflow -lopencv_surface_matching -lopencv_tracking -lopencv_datasets -lopencv_text -lopencv_dnn -lopencv_plot -lopencv_videostab -lopencv_videoio -lopencv_viz -lopencv_xfeatures2d -lopencv_shape -lopencv_ml -lopencv_ximgproc -lopencv_video -lopencv_xobjdetect -lopencv_objdetect -lopencv_calib3d -lopencv_imgcodecs -lopencv_features2d -lopencv_flann -lopencv_xphoto -lopencv_photo -lopencv_imgproc -lopencv_core -Xpreprocessor -fopenmp -lomp -std=c++11  helloWorld.cpp -o yourFileProgram
#include <cstdio>
#include <iostream>
#include <list>
#include <omp.h>
#include <string>
//#include "ImageConverter.h"
#include "Histogram.cpp"
#include "ImageConverter.cpp"

#include "opencv2/opencv.hpp"
#include <immintrin.h>

enum option { GRAYSCALE,
    TIME_AS_NUMBER,
    SHOW_ORIGINAL_PIC,
    BRIGHTNESS,
    HISTOGRAM,
    CHANGED_NUM_THREADS,
    PATH
};

struct Settings {
    std::string path = "";
    bool grayScaleNeeded = false;
    bool printTimeAsNumber = false;
    bool showingOriginalNeeded = false;
    bool changeBrightnessNeeded = false;
    bool histogramNeeded = false;
    int histogramScale = 0;
    int brightness = 0;
    int numOfThreads = 0;
    std::list<option> options;
};

int main(int argc, char** argv)
{
    option op = option::GRAYSCALE;
    op++;
    std::cout << "  "
              << "hyeeh"
              << " ";
    std::cout << "  " << (char)op << " ";

    if (argc == 1) {
        std::cout << "Help:" << std::endl
                  << "path to image: -p path" << std::endl
                  << "for grayscale: -g " << std::endl
                  << "for showing oringinal picture: -s " << std::endl
                  << "for changing brightness: -b brightness" << std::endl
                  << "for changing number of threads: -t numOfThreads" << std::endl
                  << "for printing processing-time as number: -pn" << std::endl
                  << "for histogram: -h scaleOfHistogram" << std::endl;
    } else {
        //Settings executionSettings;
        //for (int i = 1; i < argc; ++i) {
        //std::cout << argv[i];
        //if (strcmp(argv[i], "-pn") == 0) {
        //executionSettings.path = argv[i + 1];
        //}
        //if (strcmp(argv[i], "-p") == 0) {
        //executionSettings.path = argv[i + 1];
        //}
        //if (strcmp(argv[i], "-g") == 0) {
        //executionSettings.grayScaleNeeded = true;
        //}
        //if (strcmp(argv[i], "-s") == 0) {
        //executionSettings.showingOriginalNeeded = true;
        //}
        //if (strcmp(argv[i], "-h") == 0) {
        //executionSettings.histogramNeeded = true;
        //executionSettings.histogramScale = atoi(argv[i + 1]);
        //}
        //if (strcmp(argv[i], "-b") == 0) {
        //executionSettings.changeBrightnessNeeded = true;
        //executionSettings.brightness = atoi(argv[i + 1]);
        //}
        //if (strcmp(argv[i], "-t") == 0) {
        //executionSettings.numOfThreads = atoi(argv[i + 1]);
        //}
        //}
        //ImageConverter converter(path);
        //converter.setAssemblyExecution(assemblyExecution);
        //if (numOfThreads != -1) {
        //converter.setNumberOfThreads(numOfThreads);
        //}
        //double timeOfOperations = 0;
        //if (showingOriginalNeeded) {
        //cv::Mat img = converter.getImage();
        //cv::imshow("Original Image", img);
        //}
        //if (grayScaleNeeded) {
        //converter.rgbToGrayscale();
        //timeOfOperations += converter.getDurationOfLastOperation();
        //}
        //if (changeBrightnessNeeded) {
        //converter.changeBrightness(brightness);
        //timeOfOperations += converter.getDurationOfLastOperation();
        //}
        //if (histogramNeeded) {
        //cv::Mat img = converter.getImage();
        //Histogram histogram(img);
        //histogram.setAssemblyExecution(assemblyExecution);
        //if (numOfThreads != -1) {
        //histogram.setNumberOfThreads(numOfThreads);
        //}
        //cv::Mat histImg = histogram.generateHistogram(histogramScale);
        //cv::imshow("Histogram", histImg);
        //timeOfOperations += histogram.getDurationOfLastOperation();
        //}
        //std::cout << std::endl
        //<< "Processing took: " << timeOfOperations << " s" << std::endl;
        //cv::Mat img = converter.getImage();
        //cv::imshow("Result", img);
    }

    int key = cv::waitKey(0);
    cv::destroyAllWindows();
}
